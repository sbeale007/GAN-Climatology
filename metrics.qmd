---
title: "Metrics"
format: html
editor: visual
---

```{python}
import torch
import numpy as np
import pandas as pd
import xarray as xr
from matplotlib import pyplot as plt
import torch.nn.functional as F
```

```{r}

library(terra)
library(reticulate)
library(data.table)
library(ggplot2)
library(matrixStats)
```

```{python}

pred_dir = 'C:/Users/SBEALE/Desktop/GAN Predictions/tmax/wrf/march_nonan_extracov/'
pred_path = pred_dir + 'GAN_tmax_extracov_march_gen250.nc'
truth_dir = "C:/Users/SBEALE/Desktop/GAN Data/tmax/wrf/march_nonan_extracov/"
truth_path = truth_dir + 'prism_large.nc'

# load GAN predictions and true fields (PRISM) 
pred = xr.open_dataset(pred_path)
truth = xr.open_dataset(truth_path)
```

```{python}
# unstandardizing variables
stand = pd.read_csv(truth_dir + 'standardization.csv')
# stand

mean = stand['mean'][0]
std = stand['std'][0]
truth['tmax'] = (truth.tmax*std)+mean

# cropping to testing area 
pred_test = pred.sel(longitude=slice(-128, -120), latitude=slice(60, 56.02))
truth_test = truth.sel(longitude=slice(-128, -120), latitude=slice(60, 56.02))

# make torch tensors of fields to compute MAE and RAPSD
x = np.array(pred_test.tmax).shape[0]
y = np.array(pred_test.tmax).shape[1]
pred_tens = torch.from_numpy(np.array(pred_test.tmax)).reshape(1,1,x,y)
truth_tens = torch.from_numpy(np.array(truth_test.tmax)).reshape(1,1,x,y)

# calculate MAE between truth and prediction 
MAE = F.l1_loss(truth_tens, pred_tens)
# print(MAE)

# plotting truth, prediction, and difference (choose to save or not) 
fig, ax = plt.subplots(1, 3, layout='constrained', figsize=(10, 5), sharex=True, sharey=True)

minmin = np.min(truth_test.tmax)
maxmax = np.max(truth_test.tmax)
# precip (30), temp max (3)
dmin = -3
dmax = 3

pc1 = ax[0].pcolormesh(truth_test.longitude, truth_test.latitude, truth_test.tmax, vmin=minmin, vmax=maxmax, cmap='viridis', label=r'$m$')
ax[0].set_title(f'truth', fontsize='medium', loc='center')

pc2 = ax[1].pcolormesh(pred_test.longitude, pred_test.latitude, pred_test.tmax, vmin=minmin, vmax=maxmax, cmap='viridis', label=r'$m$')
ax[1].set_title(f'prediction', fontsize='medium', loc='center')

pc3 = ax[2].pcolormesh(pred_test.longitude, pred_test.latitude, truth_test.tmax.values-pred_test.tmax.values, vmin=dmin, vmax=dmax, cmap='RdBu', label=r'$m$')
ax[2].set_title(f'truth-prediction', fontsize='medium', loc='center')

fig.supylabel('latitude [deg N]')
fig.supxlabel('longitude [deg E]')

fig.suptitle(f"March tmax, MAE = %.2f" %MAE)

fig.colorbar(pc1, shrink=0.5, aspect=20, location='bottom', ax=ax[0:2])
fig.colorbar(pc3, shrink=0.9, aspect=20, location='bottom', ax=ax[2])
plt.savefig(pred_dir + "pred_PRISM_test_diff.png", dpi = 400)
plt.close()
```

```{python}
import scipy
def RASP(img,real):
    # Input data
    ynew = img # Generated data
    npix = ynew.shape[-1] # Shape of image in one dimension

    # Define the wavenumbers basically
    kfreq = np.fft.fftfreq(npix) * npix 
    kfreq2D = np.meshgrid(kfreq, kfreq) 
    knrm = np.sqrt(kfreq2D[0]**2 + kfreq2D[1]**2) # Magnitude of wavenumber/vector
    knrm = knrm.flatten() 

    # Computes the fourier transform and returns the amplitudes
    def calculate_2dft(image):
        fourier_image = np.fft.fftn(image)
        fourier_amplitudes = np.abs(fourier_image)**2
        return fourier_amplitudes.flatten()

    powers_gen = []
    powers_truth = []
    for i in range(ynew.shape[0]):
        wind_2d = calculate_2dft(ynew[i, ...])
        wind_real = calculate_2dft(real[i,...])
        kbins = np.arange(0.5, npix//2+1, 1.) # Bins to average the spectra
        Abins, _, _ = scipy.stats.binned_statistic(knrm, wind_2d, statistic = "mean", bins = kbins) 
        Abins *= np.pi * (kbins[1:]**2 - kbins[:-1]**2)
        
        # now for ground truth
        Abins_R, _, _ = scipy.stats.binned_statistic(knrm, wind_real, statistic = "mean", bins = kbins) 
        Abins_R *= np.pi * (kbins[1:]**2 - kbins[:-1]**2)
        powers_gen.append(Abins)
        powers_truth.append(Abins_R)

    return(powers_gen, powers_truth)
```

```{python}
# make tiles of testing and prediction 
x_fine= np.arange(0,truth_tens.shape[2]-128, 96)
y_fine = np.arange(0,truth_tens.shape[3]-128, 96)

truth_tiles = []
pred_tiles = []
for i in range(0, len(y_fine)):
    truth = truth_tens[:,:,:,0+y_fine[i]:128+y_fine[i]]
    pred = pred_tens[:,:,:,0+y_fine[i]:128+y_fine[i]]
    for j in range(0, len(x_fine)):
        truth_tiles.append(truth[:,:,0+x_fine[j]:128+x_fine[j]])
        pred_tiles.append(pred[:,:,0+x_fine[j]:128+x_fine[j]])

# loop through all tiles and calculate the RAPSD for each one 
rasp_pred = []
rasp_truth = []
for i in range(len(pred_tiles)):
    pred, truth = RASP(pred_tiles[i].numpy(), truth_tiles[i].numpy())
    rasp_pred.append(pred)
    rasp_truth.append(truth)
    
```

```{r}
##note - if there are tiles with empty portions, will have to remove those before calculating statistics, else will be NA
dat <- py$rasp_pred
truth <- py$rasp_truth

temp_gen <- matrix(unlist(dat), ncol = 64, byrow = T)
temp_tr <- matrix(unlist(truth), ncol = 64, byrow = T)
temp <- temp_gen/temp_tr
t_med <- colMedians(temp)
t_iqr <- colQuantiles(temp, probs = c(0.25,0.75))
t1 <- as.data.table(cbind(t_med, t_iqr))
t1[,FreqBand := 1:64]

ggplot(t1, aes(x = FreqBand, y = t_med)) +
  geom_line(linewidth = 1) +
  geom_ribbon(aes(ymin = `25%`, ymax = `75%`), alpha = 0.3, linetype = 1)+
  geom_hline(yintercept = 1)+
  ylim(0,3)

ggsave(paste(py$pred_dir, "RAPSD.png", sep=""))
```

```{r}
# For calculating lapse rates, terra::focalReg() is your friend with climate and elevation as the y and x. 

# In both functions, you can achieve a geographically circular focal area by correcting for the convergence of longitude lines. 

# loading rasters of prediction and PRISM 
pred <- rast(py$pred_path)
truth <- rast(py$truth_path)
dem <- rast("C:/Users/SBEALE/Desktop/Cropped_Coarsened_WRF_PRISM/no_overlap/DEM.nc")
dem_mask <- dem

slope <- terrain(dem, 'slope', unit='degrees')
slope_mask <- slope

slope_mask[slope_mask <= 1] <- NA

dem_mask[is.na(slope_mask)] <- NA

# pred.proj <- project(pred, dem)
# truth.proj <- project(truth, dem)

truth <- (truth*py$std)+py$mean
truth <- truth + 273.15
dem.crop <- crop(dem_mask, ext(truth))
concat.truth <- c(truth, dem.crop)

dem.crop <- crop(dem_mask, ext(pred))
pred <- pred + 273.15
concat.pred <- c(pred, dem.crop)

#function for latitude-specific correction for longitudinal length of cell
latFactor <- cos(mean(ext(dem.crop)[3:4])*(pi/180))

# function for rounding to the nearest odd integer. 
round_to_odd <- function(x) {
  if (round(x) %% 2 == 0) {
    return(floor(x/2) * 2 + 1)
  } else {
    return(round(x))
  }
}
# 
# # calculating slope of tmax (horizontal gradients? )
pred_slope <- terrain(pred, 'slope')
truth_slope <- terrain(truth, 'slope')

# focal regression for lapse rate
w <- 3
focalReg.truth <- focalReg(concat.truth, w=c(w, round_to_odd(w*latFactor)), na.rm=T)
lapse.truth <- focalReg.truth$dem
intercept.truth <- focalReg.truth$intercept

focalReg.pred <- focalReg(concat.pred, w=c(w, round_to_odd(w*latFactor)), na.rm=T)
lapse.pred <- focalReg.pred$dem
intercept.pred <- focalReg.pred$intercept

# lapse.truth[is.na(lapse.truth)] <- 0
# lapse.pred[is.na(lapse.pred)] <- 0

writeCDF(lapse.pred, paste0(py$pred_dir, "pred_lapserate.nc"), var='lapse', overwrite = T)

writeCDF(lapse.truth, paste0(py$pred_dir, "PRISM_lapserate.nc"), var='lapse', overwrite = T)

writeCDF(pred_slope, paste0(py$pred_dir, "pred_slope.nc"), var='slope', overwrite = T)

writeCDF(truth_slope, paste0(py$pred_dir, "PRISM_slope.nc"), var='slope', overwrite = T)
```

```{python}

pred = xr.open_dataset(pred_dir + "pred_lapserate.nc")
truth = xr.open_dataset(pred_dir + "PRISM_lapserate.nc")

pred_test = pred.sel(longitude=slice(-128, -120), latitude=slice(60, 56.02))
truth_test = truth.sel(longitude=slice(-128, -120), latitude=slice(60, 56.02))

# calculate MAE between lapse rates (slope)
pred_slope_tens = torch.from_numpy(np.array(pred_test.lapse))
truth_slope_tens = torch.from_numpy(np.array(truth_test.lapse))
x = pred_slope_tens.shape[0]
y = pred_slope_tens.shape[1]

# nan values so have to loop through to calculate MAE and avoid nans
# for loop for iteration 
n = 0
sums = 0
for i in range(0,x): 
  for j in range(0,y):
    if (np.isnan(truth_slope_tens[i,j])==False & np.isnan(pred_slope_tens[i,j])==False):
      sums += abs(truth_slope_tens[i,j] - pred_slope_tens[i,j])
      n += 1
  
MAE = sums/n 

# MAE = F.l1_loss(pred_slope_tens, truth_slope_tens)
# print(MAE)

# plot slope 
fig, ax = plt.subplots(1, 3, layout='constrained', figsize=(10, 5), sharex=True, sharey=True)

minmin = -0.009
maxmax = 0.009
# tmax (0.3), tmax (0.08)
dmin = -0.009
dmax = 0.009

pc1 = ax[0].pcolormesh(truth_test.longitude, truth_test.latitude, truth_test.lapse, vmin=minmin, vmax=maxmax, cmap='viridis', label=r'$m$')
ax[0].set_title(f'truth', fontsize='medium', loc='center')

pc2 = ax[1].pcolormesh(pred_test.longitude, pred_test.latitude, pred_test.lapse, vmin=minmin, vmax=maxmax, cmap='viridis', label=r'$m$')
ax[1].set_title(f'prediction', fontsize='medium', loc='center')

pc3 = ax[2].pcolormesh(pred_test.longitude, pred_test.latitude, truth_test.lapse.values-pred_test.lapse.values, vmin=dmin, vmax=dmax, cmap='RdBu', label=r'$m$')
ax[2].set_title(f'truth-prediction', fontsize='medium', loc='center')

fig.supylabel('latitude [deg N]')
fig.supxlabel('longitude [deg E]')

fig.suptitle(f"March tmax Lapse Rate, MAE = %.4f" %MAE)

fig.colorbar(pc1, shrink=0.5, aspect=20, location='bottom', ax=ax[0:2])
fig.colorbar(pc3, shrink=0.9, aspect=20, location='bottom', ax=ax[2])
plt.savefig(pred_dir + "pred_prism_lapserate.png", dpi = 400)
plt.close()
```

```{python}
plt.close()
plt.figure()
plt.imshow(pred_tens_train[0,0,...])
plt.show()
```
